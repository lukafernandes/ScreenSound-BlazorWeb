@page "/EditarArtista/{NomeArtista}"
@inject ArtistasAPI artistasAPI
@inject NavigationManager navigationManager

@if (Artista is not null)
{
    <MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Edição de Artista</MudText>

    <MudForm>

            <MudTextField Class="mt-4" T="string" 
                          Variant="Variant.Outlined"
                          @bind-Value="fotoPerfil"
                           />
        
        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista"
                      Variant="Variant.Outlined"
                      @bind-Value="nome"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista"
                      Variant="Variant.Outlined"
                      @bind-Value="biografia"
                      Lines="4"
                      Required="true"
                      RequiredError="Campo obrigatório." />
        
        <MudImage Class="mt-4" src="@fileImage" />
        <MudFileUpload T="IBrowserFile" Accept=".jpeg" FilesChanged="UpdateFile">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.PhotoCamera"
                           for="@context">
                    Foto de Perfil
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>

            <div class="d-flex align-center justify-space-between mt-4">

                <MudRating @bind-SelectedValue="Classificacao"
                           @onclick="AvaliarArtista" />

                <div>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Disabled="@(!success)"
                               Class="ml-auto"
                               @onclick="Editar">
                        Salvar
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Warning"
                               Class="ml-3"
                               @onclick="Deletar">
                        Excluir
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Info"
                               Class="ml-3"
                               @onclick="VoltarParaListagem">
                        Voltar
                    </MudButton>
                </div>

            </div>

    </MudForm>
</MudPaper>
}
else
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}

@code {
    bool success;
    string[] errors = { };
    MudForm? form;
    private string? nome;
    private string? biografia;
    private string? fileImage;
    private string? novaFotoPerfil;
    private string? fotoPerfil;
    public int Classificacao { get; set; }

    [Parameter]
    public string? NomeArtista { get; set; }

    public ArtistaResponse? Artista { get; set; }    

    protected override async Task OnInitializedAsync()
    {
        Artista = await artistasAPI.GetArtistaPorNomeAsync(NomeArtista!);
        nome = Artista!.Nome;
        biografia = Artista!.Bio;
        fotoPerfil = Artista!.FotoPerfil;
    }

    private async Task Deletar()
    {        
        await artistasAPI.DeleteArtistaAsync(Artista!.Id);
        navigationManager.NavigateTo("/Artistas");
    }

    private async Task Editar()
    {
        if(novaFotoPerfil is not null)
        {
            fotoPerfil = novaFotoPerfil;
        }
        var requestEdit = new ArtistaRequestEdit(Artista!.Id, nome!, biografia!, fotoPerfil);
        await artistasAPI.UpdateArtistaAsync(requestEdit);           
        navigationManager.NavigateTo("/Artistas");     
    }

    private void VoltarParaListagem()
    {
        navigationManager.NavigateTo("/Artistas");
    }

    private async Task UpdateFile(IBrowserFile file)
    {
        long maxFileSize = 1024 * 1024 * 15;
        var format = "image/jpeg";
        var resizedImage = await file.RequestImageFileAsync(format, 1000, 1000);

        using var fileStream = resizedImage.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);

        var imageUpload = Convert.ToBase64String(memoryStream.ToArray());
        fileImage = $"data:{format};base64,{imageUpload}";
        novaFotoPerfil = imageUpload;
    }

    private async Task AvaliarArtista()
    {
        await artistasAPI.AvaliaArtistaAsync(Artista!.Id, Classificacao);
    }

}